{"version":3,"sources":["logo.svg","vevents.js","ics.js","components/eventform.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Vevents","classification","latitude","longtitude","location","priority","summary","start","end","this","begin","geo","ending","output","Object","keys","reduce","accumulator","currentValue","substring","length","Ics","vevents","prodID","version","timezone","currentVal","build","trim","classificatication","text","value","EventForm","state","Date","handleChange","e","name","setState","handleDateStartChange","date","handleDateEndChange","buildDate","year","getYear","month","getMonth","day","getDate","handleSubmit","icsEvent","calendar","console","log","fileDownload","Fragment","Form","method","action","Select","label","options","placeholder","width","onChange","Input","inline","Group","readOnly","Icon","selected","onClick","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fa94694e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default class Vevents {\n  constructor(classification, latitude, longtitude, location, priority, summary, start, end) {\n    this.begin = 'Begin:VEVENT';\n    this.classification = 'CLASS:' + (classification || 'PUBLIC');\n    this.geo = 'GEO:' + latitude + ';' + longtitude;\n    this.summary = 'SUMMARY:' + summary;\n    this.start = 'DTSTART;VALUE=DATE:' + start;\n    this.end = 'DTEND;VALUE=DATE:' + end;\n    this.priority = 'PRIORITY:' + priority;\n    this.location = 'LOCATION:' + location;\n    this.ending = 'END:VEVENT';\n    // this.description = 'DESCRIPTION:' +  description;\n    // this.modified = new Date();\n    // this.created = created; -- not sure if we need this\n  }\n\n  // set modified(modified) {\n  //   if (modified instanceof Date) {\n  //     this.modified = modified;\n  //   }\n  // }\n\n  build() {\n    let output = '';\n    const objectKeys = Object.keys(this);\n    output = objectKeys.reduce((accumulator, currentValue) => accumulator + this[currentValue] + '\\n', '');\n    output = output.substring(0, output.length - 1);\n    return output;\n  }\n}","// Pass in components to build the ICS file\nexport default class Ics {\n  constructor(vevents = [], prodID, version, timezone) {\n    this.prodID = `PRODID:${prodID || '-//ICS 414 Turkey Pie//Calendar Project //EN'}`;\n    this.version = `VERSION:${version || '2.0'}`;\n    this.timezone = `TZID:${timezone || 'Pacific/Honolulu'}`;\n    this.vevents = vevents;\n  }\n\n  build() {\n    const output = `${'BEGIN:VCALENDAR'}${'\\n'}${this.prodID}${'\\n'}${this.version}${'\\n'}${this.timezone}${'\\n'}`\n    + `${this.vevents.reduce((accumulator, currentVal) => accumulator + currentVal.build() + '\\n', '')}`;\n\n    return output.trim() + '\\nEND:VCALENDAR';\n  }\n};\n","import React, { Component } from 'react';\nimport { Form, Icon } from 'semantic-ui-react'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Vevents from '../vevents';\nimport Ics from '../ics';\nimport fileDownload from 'js-file-download';\n\n\nconst options = [\n  { key: 'm', text: 'Malee', value: 'male' },\n  { key: 'f', text: 'Female', value: 'female' },\n  { key: 'o', text: 'Other', value: 'other' },\n]\n\nconst classificatication = [\n  {text: 'Public', value:'PUBLIC'},\n  {text: 'Private', value:'PRIVATE'}\n]\n\nclass EventForm extends Component {\n\n  // constructor(props){\n  //   super(props);\n\n  //   this.state= {\n  //     classification:'PUBLIC',\n  //     geo: {\n  //       latitude: '',\n  //       longtitude: '' \n  //     },\n  //     summary:'',\n  //     start:'',\n  //     end:'',\n  //     priority:'PRIORITY',\n  //     location:'LOCATION',\n  //   };\n  // }\n\n  state = {\n      classification:'PUBLIC',\n      latitude: '',\n      longtitude: '' ,\n      summary:'',\n      start: new Date(),\n      end: new Date(),  \n      priority:'',\n      location:'',\n  }\n\n  \n  handleChange = (e, {name, value}) => {\n    this.setState({ [name]: value })\n  }\n\n  handleDateStartChange = (date) => {\n    this.setState({ 'start': date })\n  }\n\n  handleDateEndChange = (date) => {\n    this.setState({ 'end': date })\n  }\n\n  buildDate = (date) => {\n    let year = date.getYear() + 1900;\n    let month = date.getMonth() + 1  > 9 ? date.getMonth() +1  : '0' + (date.getMonth() + 1);\n    let day = date.getDate() > 9 ? date.getDate() : '0' + date.getDate();\n    let buildDate = `${year}${month}${day}`;\n    return buildDate;\n  }\n  \n\n  handleSubmit = () => {\n    let {classification, latitude, longtitude, location, priority, summary, start, end} = this.state; \n    start = this.buildDate(start);\n    end = this.buildDate(end);\n    let icsEvent = [new Vevents(classification, latitude, longtitude, location, priority, summary, start, end)];\n    let icsCalendar = new Ics(icsEvent);\n    let calendar = icsCalendar.build();\n    console.log(this.state);\n    fileDownload(calendar, 'Calendar.ics');\n  }\n\n  render() { \n    const{classification, latitude, longtitude, summary, start, end, priority, location} = this.state;\n\n    return (  \n      <React.Fragment>\n      <Form method=\"get\" action=\"../App.js\">\n        <Form.Select\n          label='Classification'\n          options={classificatication}\n          placeholder='Classification'\n          value={classification}\n          width={2}\n          name='classification'\n          onChange={this.handleChange}\n        />\n        <Form.Input \n          inline \n          label='Latitude' \n          placeholder='Latitude' \n          value={latitude}\n          name='latitude'\n          onChange={this.handleChange}\n        />\n        <Form.Input \n          inline \n          label='Longtitude' \n          placeholder='Longtitude' \n          value={longtitude}\n          name='longtitude'\n          onChange={this.handleChange}\n        />\n        <Form.Input \n          inline \n          label='Summary' \n          value={summary}\n          onChange={this.handleChange}\n          name='summary'\n        />\n        <Form.Group inline>\n          <Form.Input \n            readOnly\n            label='Start' \n            placeholder='StartDate' \n            width={2}\n            value={start}\n          />\n          <Icon>\n            <DatePicker \n            selected={this.state.date} \n            onChange={this.handleDateStartChange} \n            name={start}\n          />\n          </Icon>\n        </Form.Group>\n        <Form.Group inline>\n          <Form.Input \n            label='EndDate' \n            placeholder='EndDate' \n            width={2}\n            value={end}\n            readOnly\n          />\n          <Icon>\n            <DatePicker \n            selected={this.state.date} \n            onChange={this.handleDateEndChange} \n            name={end}\n          />\n          </Icon>\n        </Form.Group>\n        <Form.Input \n          label='Priority' \n          placeholder='Priority: 1-10' \n          width={2}\n          onChange={this.handleChange}\n          name='priority'\n        />\n        <Form.Input \n          label='Location' \n          placeholder='Location' \n          width={2}\n          onChange={this.handleChange}\n          name='location'\n        />\n      </Form>\n      <button\n        onClick={this.handleSubmit}\n      >\n       Click to download file\n      </button>\n    </React.Fragment>\n    );\n  }\n}\n \nexport default EventForm;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport EventForm from './components/eventform';\n\nfunction App() {\n  return (\n    <EventForm/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}